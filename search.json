[
  {
    "objectID": "appendix/appendix_Classes.html",
    "href": "appendix/appendix_Classes.html",
    "title": "Classes and objects",
    "section": "",
    "text": "You’re perhaps starting to see a theme in this workshop so far. By introducing functions and then modules we’re creating reusable units which have defined interfaces (import this module, call this function with these arguments) which make it easier for people to use our code.\nWe’ve used functions to package up code which does things but as you saw when moving the code into the morse module, there’s also code in there which doesn’t exist to be called by a user but is rather just creating data which is used by the functions. The two are logically linked (the function won’t work without the data and the data isn’t useful without the functions).\nPython has a feature which allows us to combine code and data together into a single object which contains everything it needs to do anything we ask of it, these are classes. Classes are a way of creating a “template” which is then used to create objects which you can interact with.\nWith functions we were giving names to actions (or verbs) but with classes we can give names to concepts.\nImage that we want to write some code to represent our pet dog, Spot. The dog has a name and a colour. Based on the tools we know so far, we might represent this as a dictionary:\n\nour_dog = {\"name\": \"Spot\", \"colour\": \"brown\"}\n\nThe problem with a dictionary, however, is that if you’re passing it to a function you have to be very careful to ensure that it has all the keys correctly set that the function expects. For example, if there were a function describe which looks like:\n\ndef describe(dog):\n    return f\"{dog['name']} is {dog['colour']}\"\n\nprint(describe(our_dog))\n\nSpot is brown\n\n\nthen you would need to ensure that any data that was passed to it had the keys \"name\" and \"colour\". If they were missing you would get an error when you ran the code.\nWe can use classes to create a new type of data which represent all dogs and we can ensure that all data of this type always have the name and colour attributes.\n\nStarting our class\nWe would represent this as a class with:\n\nclass Dog:\n    def __init__(self, name, colour):\n        self.name = name\n        self.colour = colour\n\nThis has created a new data type called Dog which we can create instances of with:\n\nour_dog = Dog(\"Spot\", \"brown\")\n\nWe can ask for information from that instance using the dot syntax:\n\nprint(our_dog.name)\n\nSpot\n\n\nDog and our_dog are different kind of thing. Dog is called a class and can be seen as a template for creating dog objects. our_dog is one such object.\nYou can make multiple objects from a class, for example we can make a second dog, Fido with:\n\nother_dog = Dog(\"Fido\", \"grey\")\n\nand get information about that dog with the same attribute names on the new object:\n\nprint(other_dog.colour)\n\ngrey\n\n\nThis means that we can tweak our describe function to accept a Dog object and we can trust that it will always work. no matter which Dog we pass to it:\n\ndef describe(dog):\n    return f\"{dog.name} is {dog.colour}\"\n\nprint(describe(our_dog))\n\nSpot is brown\n\n\n\n\nWhat is __init__?\n__init__ is a function. It is a special function and is sometimes called the constructor or initialiser. It must be present in all classes, and constructors are used in all object orientated programming languages.\nThe job of the constructor is to set up the initial state of an object. In this case, you can see that the constructor creates two variables:\n\nname which will hold the name of the dog\nand colour which will hold a string describing the colour of the dog.\n\nNote that the variables are defined as attached to self, via the full stop, e.g. self.name. self is a special variable that is only available within the functions of the class and provides access to the current object that we are talking about. There is a full explanation of how self works below.\n__init__ is called automatically when an object of that class is created. In our case, when we call Dog(...) it will call __init__ for us.\nThe first time we called our_dog = Dog(\"Spot\", \"brown\"), self was referring at the object we were putting at our_dog so self.name is referring to the same thing as our_dog.name. The second time we called it it was referring to the object at other_dog.\nNote that while self is written in the function definition as if it were a parameter of __init__, we don’t need to pass it ourselves. self is passed implicitly by Python when we construct an object of the class.\n\n\nClass functions\nAt the moment, Dog isn’t giving us any real benefit above using a dictionary. It’s still just a container for data. One of the benefits of classes is being able to combine data and functionality in one place.\nMaking Dog as a class means that we can trust that if we pass a Dog to describe that it will definitely work but this has left us in a position where our data and functions are separate and we have to remember that describe takes a Dog object as its argument.\nWe can solve this by enforcing that the describe function can only ever be called on a Dog object by moving the function inside the class.\nTo move this function so that it is a part of the class we do two things:\n\nmove the lines of code into the class, indenting it appropriately\nreplace dog with self\n\nthis give us:\n\nclass Dog:\n    def __init__(self, name, colour):\n        self.name = name\n        self.colour = colour\n    \n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\n\nSince we have changed the code defining what a Dog is, we need to recreate our objects so that they know about the changes:\n\nour_dog = Dog(\"Spot\", \"brown\")\nother_dog = Dog(\"Fido\", \"grey\")\n\nWe can now call the describe function on each Dog object using the dot syntax:\n\nprint(our_dog.describe())\n\nSpot is brown\n\n\n\nprint(other_dog.describe())\n\nFido is grey\n\n\nWhen a function has been moved inside a class like this, it is sometimes referred to as a method but I use both terms.\nThere is now no way to call this function (or method) on any object which is not a Dog.\n\n\nAdding variable state\nHaving the bare facts about the dog is useful but we want to be able to make it a living, breathing thing. Let’s introduce the concept of “energy” for the dog. It will be a number which increases when we feed it and decreases when we exercise it.\nPreviously we added all object attributes as arguments to __init__ and then assigned them to self with self.name =. It is perfectly possible to set object attributes statically, without having them depend on the arguments that were passed in.\nFor example, we want our dog to have energy as an attribute. Let’s decide that by default, all Dogs have an energy of 1 when they are first created. We can assign the variable self.energy in __init__:\n\nclass Dog:\n    def __init__(self, name, colour):\n        self.name = name\n        self.colour = colour\n        self.energy = 1  # This is the only new line\n    \n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\n\nNow that we have energy as an attribute we can go ahead and write a function which uses it. We want our dog to be able to take our dog for a walk which will use up energy. We add another method to the class called exercise:\n\nclass Dog:\n    def __init__(self, name, colour):\n        self.name = name\n        self.colour = colour\n        self.energy = 1\n\n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\n    \n    def exercise(self):\n        print(f\"You take {self.name} for a walk\")\n        self.energy -= 1\n\nSee that in the exercise function we are accessing the energy with self.energy.\nWe can test that this is working by recreating our dog instance and seeing how calling exercise affects the dog’s energy:\n\nour_dog = Dog(\"Spot\", \"brown\")\nother_dog = Dog(\"Fido\", \"grey\")\n\n\nprint(our_dog.energy)\n\n1\n\n\n\nour_dog.exercise()\n\nYou take Spot for a walk\n\n\n\nprint(our_dog.energy)\n\n0\n\n\nAfter calling the exercise function, we can see that Spot’s energy has reduced by one.\nBut note that Fido’s energy has not been affected:\n\nprint(other_dog.energy)\n\n1\n\n\nLet’s complete the story by also implementing a function which we can use to feed our dog to give it energy:\n\nclass Dog:\n    def __init__(self, name, colour):\n        self.name = name\n        self.colour = colour\n        self.energy = 1\n    \n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\n    \n    def exercise(self):\n        print(f\"You take {self.name} for a walk\")\n        self.energy -= 1\n            \n    def feed(self):\n        print(f\"{self.name} eats the food\")\n        self.energy += 1\n\n\n\nAbout self\nThe existence and purpose of the self parameter in Python classes is often the most confusing thing when learning about them. To get to the point of seeing why it works the way it does, there’s a few things to clarify.\nThe code that we write that defines our class can be thought of as a template which will be used to create by every instance (object) of that class. This means that any code we write in there has to work and make sense for all objects that were made from the template. The functions we define in there therefore also need to be generic and work on all objects made from the class. The code we write must work as well for Spot as it does for Fido as well as for any other Dogs that may be created in the future.\nIf a function is generic, how can it know that at one point in your program it’s being called on object A and and some later time being called on object B? We do this by accepting to the function, as an parameter, the object that we’re calling it on. It is this that self is referring to.\nTo show this in action, let’s walk through an example:\nWe can construct as many instances (objects) of a class as we want, and each will have its own self and its own set of attributes:\n\nour_dog = Dog(\"Spot\", \"brown\")\nother_dog = Dog(\"Fido\", \"grey\")\n\nIf we describe our_dog we get:\n\nour_dog.describe()\n\n'Spot is brown'\n\n\nbut calling the same function on the other dog gives us a different result:\n\nother_dog.describe()\n\n'Fido is grey'\n\n\nLet’s go thorough that more slowly and see what self is doing along the way.\nFirst we called the Dog class like a function, passing it two arguments and assigned it to the variable our_dog:\nour_dog = Dog(\"Spot\", \"brown\")\nWhen you call a class like this, it makes a new object from the template and automtically calls the __init__ function behind the scenes. As we saw before, our __init__ has three parameters, self, name and colour. Python, when calling __init__ will automatically pass in our object (our_dog in this case) as the first argument and so inside the function, self is referring to our_dog, our newly created object.\nTherefore, we can imagine that our function which looks like:\ndef __init__(self, name, colour):\n    self.name = name\n    self.colour = colour\n    self.energy = 1\nis being treated like:\nself = our_dog\nname = \"Spot\"\ncolour = \"brown\"\n\nself.name = name\nself.colour = colour\nself.energy = 1\nand so here, self.name = name is effectively doing our_dog.name = \"Spot\".\nThe same thing happens when we create other_dog with:\nother_dog = Dog(\"Fido\", \"grey\")\nWe now know that due to the __init__ function operating on self, we now have two dogs where our_dog.name is \"Spot\" and other_dog.name is \"Fido\".\nNow that both of our objects have been fully created, we’re ready to start interacting with them by calling some functions.\nWhen we call the describe function, a similar process occurs:\nour_dog.describe()\nSince the our_dog object was made from the Dog class, our_dog.describe is referring to the describe function inside that class:\nclass Dog:\n    ...\n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\nand so\nour_dog.describe()\nit is effectively doing\nDog.describe(our_dog)\nand passing whatever object the describe function was called on as the first argument. Again, inside the function this is called self so when we do\nf\"{self.name} is {self.colour}\"\nit is essentially doing\nf\"{our_dog.name} is {our_dog.colour}\"\nTo summarise, the self parameter in class functions points at the object that the function was called on. The programmer calling the function does not pass the argument explicitly, it is done automatically by Python. This allows you to store data in one function (e.g. in __init__ doing self.name = name) and use it in another (e.g. in describe doing f\"{self.name} is {self.colour}\").\n\n\nData classes\nPython 3.7 (release June 2018) introduced a new feature called data classes which aim to simplify the common tasks of creating classes. If you can rely on having this version or newer of Python available then consider looking into using data classes.\n\nExercise\nIn the morse module, write a class called Message which we will use to hold a message in either English or Morse code. To start you off, here is the skeleton of some of the structure with ... where you will need to write some more code:\nclass Message:\n    def __init__(...):\n        ...\n    \n    def as_morse(self):\n        if self.is_morse:\n            ...\n        ...\n    \n    def ...\n\nThe __init__ should take one argument, message, which should be saved onto self like we did with colour in the Dog example.\nAdd an if/else statement in __init__ to check whether the passed message is a Morse message using \".\" in message or \"-\" in message. Use this to save a attribute onto self called is_morse which should be True if the message is in Morse code and False if it is in English.\nAdd two class functions: as_morse and as_english. as_morse should return the saved message directly if it was passed in to __init__ in Morse code or use the decode function to decode it otherwise. as_english should do the converse.\n\nWhen you have finished, test that the Morse code produced by your class is correctly translated back to English. Edit test_morse.py to read:\nfrom morse import Message\n\n# Convert English to Morse\nmy_message = Message(\"hello world\")\nmorse_string = my_message.as_morse()\n\n# Convert it back again\nincoming_message = Message(morse_string)\ndecoded_string = incoming_message.as_english()\n\nprint(decoded_string == \"hello world\")\nWhen run, it should print True, showing that your Message class can encode and decode the message.\nFeel free to look at the answer to guide you.\n\n\n\nNaming\nYou may have noticed a few different styles of naming used for things so far. We’ve been calling our data variables things like letter_to_morse while our class was called Message. The first style with all lower case letter and underscores to separate words is known as snake case and the style with upper case letters at the start of words but no spaces between them is known as camel case.\nPython has a document called PEP-8 which contains suggestions on how to format and name your code and it suggests: - variables: snake case like letter_to_morse or message - functions: snake case like encode or add_arrays - modules: snake case like morse or arrays - classes: camel case like Message or Dog\nThese are just suggestions and while they are followed by the majority of Python projects, if you are contributing to an existing Python project then you should follow their internal code style."
  },
  {
    "objectID": "appendix/aside_zip.html",
    "href": "appendix/aside_zip.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "The zip function provides a way to loop over more that one list at once. It takes two arguments, each of which should be a list and gives you back something you can loop over.\nFor example, imagine we have the two lists a and b:\n\na = [1, 2, 3, 4]\nb = [5, 6, 7, 8]\n\nwe can pass them to the zip function and have a look at what it returns:\n\nzip(a, b)\n\n&lt;zip at 0x7fc6b45c1f00&gt;\n\n\nhmm, this doesn’t look very useful, it’s just returned us a zip?\nIn fact, it has given us back a zip object. This is an object which, when looped over, will give us the elements one at a time. The reason it is done like this is that it means that it only has to calculate the elements as it goes along rather than doing them all up-front. This is termed a lazy iterator and is something which crops up often in Python.\nTo force it to give us all the elemnts at once, we can turn it into a list by using the list function:\n\nlist(zip(a, b))\n\n[(1, 5), (2, 6), (3, 7), (4, 8)]\n\n\nThat looks more useful! It is a list where each element is a pair of values. The first element is the pair 1, 5. This has come from the first element in a (1) and the first element in b (5).\nThe second element in the list is 2, 6 which has come from the second element in each input list.\nWe can see this in a slightly different way by looping over the result of the zip rather than passing it to the list function:\n\nfor element in zip(a, b):\n    print(element)\n\n(1, 5)\n(2, 6)\n(3, 7)\n(4, 8)\n\n\nAgain we see that the pairs have been printed out, taken from each input list.\nWe can break the element into its parts using indexing notation:\n\nfor element in zip(a, b):\n    print(f\"from a: {element[0]}, from b: {element[1]}\")\n\nfrom a: 1, from b: 5\nfrom a: 2, from b: 6\nfrom a: 3, from b: 7\nfrom a: 4, from b: 8\n\n\nThe downside of this is that we have to remember that element[0] refers to a. Instead, we can break the pair apart directly in the for loop by providing a name for each part:\n\nfor from_a, from_b in zip(a, b):\n    print(f\"from a: {from_a}, from b: {from_b}\")\n\nfrom a: 1, from b: 5\nfrom a: 2, from b: 6\nfrom a: 3, from b: 7\nfrom a: 4, from b: 8\n\n\nThat should give you enough understanding of the zip fucntion to follow what our array-adding code is doing."
  },
  {
    "objectID": "answers/answer_morse_module_encode.html",
    "href": "answers/answer_morse_module_encode.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "morse.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\n\n\n\nencode.py\n\nimport morse\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"\n\nencoded_message = morse.encode(message)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {encoded_message}\")\n\n\n\n\nTerminal/Command Prompt\n\npython encode.py\n\n\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--\n\n\nReturn to course"
  },
  {
    "objectID": "answers/answer_hello_name.html",
    "href": "answers/answer_hello_name.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "To get input from the person running your script, you can use the input() function.\nIf you pass a string argument to it, it will use that as the “prompt” when asking for input.\n\n\n\nhello.py\n\nmy_name = input(\"Please tell me your name: \")\n\nname_length = len(my_name)\n\nprint(f\"Hello {my_name}! Your name is {name_length} characters long\")\n\n\n\n\nTerminal/Command Prompt\n\npython hello.py\n\n\n\nPlease tell me your name: Matt\nHello Matt! Your name is 4 characters long\n\n\nReturn to course"
  },
  {
    "objectID": "answers/answer_morse_decode_function.html",
    "href": "answers/answer_morse_decode_function.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "Here we make the same changes as with encode.py: 1. def decode(message): added to the beginning 2. The code is indented by four spaces 3. return english_message added to the end 4. Call the function\n\n\n\ndecode.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\nmessage = \"... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--\"\n\n\ndef decode(message):\n    english = []\n\n    # Now we cannot read by letter. We know that morse letters are\n    # separated by a space, so we split the morse string by spaces\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english.append(morse_to_letter[letter])\n\n    # Rejoin, but now we don't need to add any spaces\n    english_message = \"\".join(english)\n    \n    return english_message\n\n\nprint(decode(message))\n\n\n\n\nTerminal/Command Prompt\n\npython decode.py\n\n\n\nsos we have hit an iceberg and need help quickly\n\n\nReturn course"
  },
  {
    "objectID": "answers/answer_morse_string_formatting.html",
    "href": "answers/answer_morse_string_formatting.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "The following code should be put into a file called encode.py using the text editor in JupyterLab:\n\n\n\nencode.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\nmessage = \"please help\"\n\n# `morse` is a list which will eventually contain the \n# strings for each morse code letter in the message.\nmorse = []\n\nfor letter in message:\n    morse_letter = letter_to_morse[letter]\n    morse.append(morse_letter)\n\n# We need to join together Morse code letters with spaces\nmorse_message = \" \".join(morse)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {morse_message}\")\n\n\nOnce that code is in the file and the file has been saved, run the code by typing the following in the Terminal and pressing Enter:\n\n\nTerminal/Command Prompt\n\npython encode.py\n\n\n\nIncoming message: please help\n   Morse encoded: .--. .-.. . .- ... . / .... . .-.. .--.\n\n\nReturn to course"
  },
  {
    "objectID": "answers/answer_morse_exceptions.html",
    "href": "answers/answer_morse_exceptions.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "!rm -f morse.py\n\nmorse.py is the same as in the previous exercise. We have our test in Message.__init__ to check for !:\n\n%%writefile morse.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    if \"!\" in message:                                            # ← new code\n        raise ValueError(f\"'!' is not valid in English strings\")  # ←\n    \n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\n\ndef decode(message):\n    english = []\n\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english_letter = morse_to_letter[letter]\n        english.append(english_letter)\n\n    english_message = \"\".join(english)\n    \n    return english_message\n\nWriting morse.py\n\n\nIf we add some ! to our message_string in encode.py then we see our ValueError exception raised:\n\n%%writefile encode.py\n\nimport morse\n\nmessage = \"SOS We have hit an iceberg and need help quickly!!!!!\"  # ← Added ! to end of string\n\nencoded_message = morse.encode(message)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {encoded_message}\")\n\nWriting encode.py\n\n\n\n%run encode.py\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nFile ~/work/intermediate-python/intermediate-python/answers/encode.py:6\n      2 import morse\n      4 message = \"SOS We have hit an iceberg and need help quickly!!!!!\"  # ← Added ! to end of string\n----&gt; 6 encoded_message = morse.encode(message)\n      8 print(f\"Incoming message: {message}\")\n      9 print(f\"   Morse encoded: {encoded_message}\")\n\nFile ~/work/intermediate-python/intermediate-python/answers/morse.py:14, in encode(message)\n     12 def encode(message):\n     13     if \"!\" in message:                                            # ← new code\n---&gt; 14         raise ValueError(f\"'!' is not valid in English strings\")  # ←\n     16     morse = []\n     18     for letter in message:\n\nValueError: '!' is not valid in English strings\n\n\n\nMoving all that code into a try/except ValueError block we can catch the error and print something\n\n%%writefile encode.py\n\nimport morse\n\nmessage = \"SOS We have hit an iceberg and need help quickly!!!!!\"\n\ntry:\n    encoded_message = morse.encode(message)\n\n    print(f\"Incoming message: {message}\")\n    print(f\"   Morse encoded: {encoded_message}\")\nexcept ValueError as e:\n    print(f\"Could not encode message: {e}\")\n\nOverwriting encode.py\n\n\n\n%run encode.py\n\nCould not encode message: '!' is not valid in English strings\n\n\nPassing in a valid string (removing the !) results in the code running correctly:\n\n%%writefile encode.py\n\nimport morse\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"  # Removed ! from end of string\n\ntry:\n    encoded_message = morse.encode(message)\n\n    print(f\"Incoming message: {message}\")\n    print(f\"   Morse encoded: {encoded_message}\")\nexcept ValueError as e:\n    print(f\"Could not encode message: {e}\")\n\nOverwriting encode.py\n\n\n\n%run encode.py\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--"
  },
  {
    "objectID": "answers/answer_morse_raise.html",
    "href": "answers/answer_morse_raise.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "We have added some code to the beginning of morse.encode to check, in the case of the passed string being an English string, that it contains no !. If it does, we raise a ValueError.\nFrom the docs:\n&gt; `ValueError`: Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as `IndexError`.\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    if \"!\" in message:                                            # ← new code\n        raise ValueError(f\"'!' is not valid in English strings\")  # ←\n    \n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\n\ndef decode(message):\n    english = []\n\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english_letter = morse_to_letter[letter]\n        english.append(english_letter)\n\n    english_message = \"\".join(english)\n    \n    return english_message\n\nReturn to course"
  },
  {
    "objectID": "answers/answer_function_big_numbers.html",
    "href": "answers/answer_function_big_numbers.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "Starting from the initial code:\n\n\n\nbignums.py\n\nmy_list = [5, 7, 34, 5, 3, 545]\n\nbig_numbers = []\nfor num in my_list:\n    if num &gt; 10:\n        big_numbers.append(num)\n\nprint(big_numbers)\n\n\npython bignums.py\n\n\n[34, 545]\n\n\nWe pull out the middle four lines, indent them, put def big(numbers): in front and add return big_numbers to the end, paying careful attention to the indentation of the return statement. Finally, we update the variable name used in the function to match the argument name numbers:\n\n\n\nbignums.py\n\ndef big(numbers):\n    big_numbers = []\n    for num in numbers:\n        if num &gt; 10:\n            big_numbers.append(num)\n    return big_numbers\n\n\nmy_list = [5, 7, 34, 5, 3, 545]\n\nlarge_numbers = big(my_list)\n\nprint(large_numbers)\n\n\n\n\nTerminal/Command Prompt\n\npython bignums.py\n\n\n\n[34, 545]\n\n\nReturn to course"
  },
  {
    "objectID": "answers/answer_morse_encode_function.html",
    "href": "answers/answer_morse_encode_function.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "We add a new function called encode which takes the exact code as before but with three changes: 1. def encode(message): added to the beginning 2. The code is indented by four spaces 3. return morse_message added to the end\nWe then call our function with morse_message = encode(message)\n\n\n\nencode.py\n\nletter_to_morse = {'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n                   'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n                   'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n                   'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n                   '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n                   '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.',\n                   ' ':'/'}\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\nmorse_message = encode(message)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {morse_message}\")\n\n\n\n\nTerminal/Command Prompt\n\npython encode.py\n\n\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--\n\n\nReturn to course"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "Welcome to a short course which will introduce you to some more of the Python programming language and show how they can make it easier to share your code with other people.\nYou can jump ahead to any chapter:\n\nString formatting\nUsing functions\nWriting functions\nModules\nExceptions\nList comprehensions\nSummary\n\nFor the purpose of this course we will be using a free tool called JupyterLab which provides you with a local editor in your web browser where you can write and run Python code. The easiest way to get access to JupyterLab is to install Anaconda which is a piece of software which includes Python along with lots of other tools. It is freely available for Windows, MacOS and Linux.\nOnce Anaconda is installed, start “Anaconda Navigator” and press the JupyterLab “Launch” button on the main screen:\n\n\n\nAnaconda Navigator\n\n\nThis will open JupyterLab in your default web browser and will look something like this:\n\n\n\nJupyterLab\n\n\nThe way that we will be setting up the space is to have a text editor on the left-hand side of the screen and a terminal on the right hand side. We’ll use the editor to write our code and the terminal to run it.\nIn the launcher tab, scroll down to the “Text File” entry and click that. It will turn the editor into a text editor. Then go to File → New and select “Terminal”. It will now have two tabs inside the interface, one labelled “untitled.txt” and the other labelled “Terminal 1”:\n\n\n\nJupyterLab\n\n\nTo make our lives easier, let’s rearange things so that we can see the text editor at the same time as the terminal. Do this by pressing and holding down the left mouse button on the tab that says “Terminal 1” and slowly dragging it to the right-hand side of the window. You’ll see a blue outline like this:\n\n\n\nJupyterLab\n\n\nRelease the mouse button and you’ll end up with the two showing side-by-side:\n\n\n\nJupyterLab\n\n\nThis layout is just a recomendation and if you’d rather do it differently, that’s fine. Also if you’re comfortable using an IDE like VS Code, PyCharm or Spyder then you’re welcome to as long as you have a Terminal window and a text editor.",
    "crumbs": [
      "Intermediate Python"
    ]
  },
  {
    "objectID": "utils/template.html",
    "href": "utils/template.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "FILENAME\n\nCODE\n\n\npython FILENAME\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[2], line 1\n----&gt; 1 CODE\n\nNameError: name 'CODE' is not defined"
  },
  {
    "objectID": "answers/answer_string_methods.html",
    "href": "answers/answer_string_methods.html",
    "title": "Split a string",
    "section": "",
    "text": "You can split any string using the str.split function. By default it splits on spaces:\n\ns = \"what is your name\"\ns.split()\n\n['what', 'is', 'your', 'name']\n\n\n\nJoin a list\nYou can join a list together by using the str.join function. Note that in front of the dot you put the string that you want to join with, and you pass the list you want to join together as an argument.\n\nl = [\"a\", \"b\", \"c\"]\n\"-\".join(l)\n\n'a-b-c'\n\n\n\nl = [\"a\", \"b\", \"c\"]\n\":\".join(l)\n\n'a:b:c'\n\n\n\nl = [\"a\", \"b\", \"c\"]\n\" \".join(l)\n\n'a b c'\n\n\nReturn to course"
  },
  {
    "objectID": "answers/answer_practice_questions.html",
    "href": "answers/answer_practice_questions.html",
    "title": "Worksheet answers",
    "section": "",
    "text": "## Exercise 1\nThe function we can use is datetime.datetime.now(). There is an example in that module as well.\n\n%%writefile ex1.py\n\nimport datetime\n\ntime_now = datetime.datetime.now()\n\nprint(time_now.isoformat())\n\nWriting ex1.py\n\n\n\n%run ex1.py\n\n2024-09-25T13:17:49.341088\n\n\n## Exercise 2\n\n%%writefile ex2.py\n\ndef first_word(l):\n    words = l.split()\n    the_first_word = words[0]\n    return the_first_word\n\nsentence = \"This is a collection of words\"\nword = first_word(sentence)\nprint(word)\n\nWriting ex2.py\n\n\n\n%run ex2.py\n\nThis\n\n\n## Exercise 3\n\n%%writefile ex3.py\n\ndef count_word_match(words, match, case_sensitive):\n    if not case_sensitive:\n        # Make both the words and the match a consistent case\n        words = words.casefold()\n        match = match.casefold()\n    \n    word_list = words.split()\n    \n    count = 0\n    for word in word_list:\n        if word == match:\n            count += 1\n    \n    return count\n\ncount1 = count_word_match(\"To be or not to be\", \"to\", True)\nprint(count1)\n\ncount2 = count_word_match(\"To be or not to be\", \"to\", False)\nprint(count2)\n\nWriting ex3.py\n\n\n\n%run ex3.py\n\n1\n2\n\n\n## Exercise 4\nThis exercise it tricker, but if you make some assumptions about the format of the input, you can make your life easier. For example, you can assume for now that every reference like [4] is surrounded by spaces. This allows str.split() to pull each one out as a “word”. You can also assume that every reference is an integer number.\n\n%%writefile ex4.py\n\ndef find_references(text):\n    words = text.split()\n    \n    refs = []\n    # For each word in the text\n    for word in words:\n        # if it's surrounded by square brackets\n        if word[0] == \"[\" and word[-1] == \"]\":\n            # grab the bit between the square brackets\n            reference = word[1:-1]\n            # convert it to a number\n            reference_number = int(reference)\n            refs.append(reference_number)\n    \n    return refs\n\nexample_text = \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nreferences = find_references(example_text)\n\nprint(references)\n\nWriting ex4.py\n\n\n\n%run ex4.py\n\n[1, 3, 10, 7]\n\n\n\nAlternative solution\nIf you are familiar with regular expressions (we haven’t covered them in this course, so you might not be) then you can use this pattern matching language to extract the references. This is more reliable as the above method does not work if there is, e.g., no space between the ] and the next letter: bad ref [3]..\nIn this case, the regular expression \\[(\\d+)\\] means: find an openning square bracket (\\[), followed by one or more (+) digits (\\d), followed by a closing square bracket (\\]). If you find that, then pull out the digit part (()). It’s a very concise way of describing a pattern.\n\n%%writefile ex4_re.py\n\nimport re\n\ndef find_references(text):\n    ref_matches = re.findall(r\"\\[(\\d+)\\]\", text)\n    \n    ref_numbers = []\n    for ref in ref_matches:\n        ref_numbers.append(int(ref))\n        \n    return ref_numbers\n\nexample_text = \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nreferences = find_references(example_text)\n\nprint(references)\n\nWriting ex4_re.py\n\n\n\n%run ex4_re.py\n\n[1, 3, 10, 7]\n\n\n## Exercise 5\n\n%%writefile refs.py\n\ndef find_references(text):\n    words = text.split()\n    \n    refs = []\n    for word in words:\n        if word[0] == \"[\" and word[-1] == \"]\":\n            reference = word[1:-1]\n            reference_number = int(reference)\n            refs.append(reference_number)\n    \n    return refs\n\nWriting refs.py\n\n\n\n%%writefile test_refs.py\n\nimport refs\n\ntext = \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nnumbers = refs.find_references(text)\n\nexpected = [1, 3, 10, 7]\nif numbers == expected:\n    print(\"Test passed\")\nelse:\n    print(\"Test failed:\", numbers, \"is not the same as\", expected)\n\nWriting test_refs.py\n\n\n\n%run test_refs.py\n\nTest passed"
  },
  {
    "objectID": "answers/answer_morse_class.html",
    "href": "answers/answer_morse_class.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "We add the definition of the class Message to the top of the morse module.\n\n%%writefile morse.py\n\nclass Message:\n    def __init__(self, message):\n        self.message = message\n        \n        if \".\" in self.message or \"-\" in self.message:\n            self.is_morse = True\n        else:\n            self.is_morse = False\n    \n    def as_morse(self):\n        if self.is_morse:\n            return self.message\n        \n        return encode(self.message)\n    \n    def as_english(self):\n        if not self.is_morse:\n            return self.message\n        \n        return decode(self.message)\n\n################################################\n# Everything after here is identical to before #\n################################################\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\n\ndef decode(message):\n    english = []\n\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english_letter = morse_to_letter[letter]\n        english.append(english_letter)\n\n    english_message = \"\".join(english)\n    \n    return english_message\n\nWriting morse.py\n\n\nWe then change our test_morse.py file as directed:\n\n%%writefile test_morse.py\n\nfrom morse import Message\n\nmy_message = Message(\"hello world\")\nmorse_string = my_message.as_morse()\n\nincoming_message = Message(morse_string)\ndecoded_string = incoming_message.as_english()\n\nprint(decoded_string == \"hello world\")\n\nWriting test_morse.py\n\n\n\n%run test_morse.py\n\nTrue"
  },
  {
    "objectID": "answers/answer_morse_comprehension.html",
    "href": "answers/answer_morse_comprehension.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "morse.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\ndef encode(message):\n    if \"!\" in message:\n        raise ValueError(f\"'!' is not valid in English strings\")\n\n    morse = [letter_to_morse[letter] for letter in message.lower()]\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n    \ndef decode(message):\n    english = [morse_to_letter[letter] for letter in message.split(\" \")]\n\n    english_message = \"\".join(english)\n    \n    return english_message\n\n\n\n\n\nmorse.py\n\nimport morse\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"\n\nencoded_message = morse.encode(message)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {encoded_message}\")\n\n\n\n\nTerminal/Command Prompt\n\npython morse.py\n\n\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--\n\n\nReturn to course"
  },
  {
    "objectID": "answers/answer_morse_case.html",
    "href": "answers/answer_morse_case.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "The function str.lower gives you back a copy of the string, but all made into lower case.\nIn our situation, the first letter is “S” and so letter.lower() will give us \"s\".\n\n\n\nencode.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"\n\nmorse = []\n\nfor letter in message:\n    letter = letter.lower()  #  ← We have added this line of code\n    morse_letter = letter_to_morse[letter]\n    morse.append(morse_letter)\n\nmorse_message = \" \".join(morse)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {morse_message}\")\n\n\n\n\nTerminal/Command Prompt\n\npython encode.py\n\n\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--\n\n\nReturn to course"
  },
  {
    "objectID": "answers/answer_morse_module_decode.html",
    "href": "answers/answer_morse_module_decode.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "letter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\n\ndef decode(message):\n    english = []\n\n    # Now we cannot read by letter. We know that morse letters are\n    # separated by a space, so we split the morse string by spaces\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english_letter = morse_to_letter[letter]\n        english.append(english_letter)\n\n    # Rejoin, but now we don't need to add any spaces\n    english_message = \"\".join(english)\n    \n    return english_message\n\n\n\n\ndecode.py\n\nimport morse\n\nmessage = \"... . -.-. .-. . - / -- . ... ... .- --. .\"\n\ndecoded_message = morse.decode(message)\n\nprint(decoded_message)\n\n\n\n\nTerminal/Command Prompt\n\npython decode.py\n\n\n\nsecret message\n\n\nReturn to course"
  },
  {
    "objectID": "answers/answer_function_double.html",
    "href": "answers/answer_function_double.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "doubler.py\n\ndef double(num):\n    return num * 2\n\nmy_num = 10\n\ndoubled = double(my_num)\n\nprint(doubled)\n\n\n\n\nTerminal/Command Prompt\n\npython doubler.py\n\n\n\n20\n\n\nReturn to course"
  },
  {
    "objectID": "appendix/appendix_practice_questions.html",
    "href": "appendix/appendix_practice_questions.html",
    "title": "Practice questions",
    "section": "",
    "text": "This page contains a number of questions and exercises to give you a chance to practise what you have learned this session.\nYou should create a new .py Python file for each exercise.\n\n\n\n\n\n\nExercise 1\n\n\n\nThe first exercise is to practise searching the documentation. From the list of modules in the standard library, find one that contains a function to give the current date and time.\nFill in the ... in the snippet below.\nimport ...\n\ntime_now = ...\n\nprint(time_now.isoformat())\nThe output should be something like the following, but with today’s date and time:\n2025-04-01T10:53:15.062603\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\nWrite a function which can accept a string as an argument and return the first word in that string. To start you off, here’s skeleton of what the function should look like.\ndef first_word(l):\n    ...\n    return ...\nyou should be able to use it like:\nsentence = \"This is a collection of words\"\nword = first_word(sentence)\nprint(word)\ngiving the output:\nThis\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\nWrite a function called count_word_match which accepts three agruments:\n\na string which contains multiple words separated by spaces,\na string which gives the word that you want to count the occurrences of and\na boolean (True or False) which specifies whether the match should be case-sensitive.\n\ndef count_word_match(words, match, case_sensitive):\n    ...\n    return ...\nyou should be able to use it like:\ncount1 = count_word_match(\"To be or not to be\", \"to\", True)\nprint(count1)\n\ncount2 = count_word_match(\"To be or not to be\", \"to\", False)\nprint(count2)\ngiving the output:\n1\n2\n\n\n\n\n\n\n\n\nExercise 4\n\n\n\nFor this exercise, you should write a function which can find references, like [4], in some text.\nIf the function is passed a string like:\n\"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\nit should return a list of integers like:\n[1, 3, 10, 7]\nThe function should be called find_references.\n\n\n\n\n\n\n\n\nExercise 5\n\n\n\nTake the fnction that you wrote in the last exercise and move it into a module called refs. You should then write a test file called test_refs.py containing:\nimport refs\n\ntext = \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nnumbers = refs.find_references(text)\n\nexpected = [1, 3, 10, 7]\nif numbers == expected:\n    print(\"Test passed\")\nelse:\n    print(\"Test failed:\", numbers, \"is not the same as\", expected)\nYou should make sure that the test passes when the test script is run with:\n\n\nTerminal/Command Prompt\n\npython test_references.py\n\n\n\nReturn to summary"
  },
  {
    "objectID": "appendix/aside_dataclasses.html",
    "href": "appendix/aside_dataclasses.html",
    "title": "Data classes",
    "section": "",
    "text": "The code for our Dog looked like this using traditional classes:\n\nclass Dog:\n    def __init__(self, name, colour):\n        self.name = name\n        self.colour = colour\n        self.energy = 1\n    \n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\n    \n    def exercise(self):\n        print(f\"You take {self.name} for a walk\")\n        self.energy -= 1\n            \n    def feed(self):\n        print(f\"{self.name} eats the food\")\n        self.energy += 1\n\nPython 3.7 (release June 2018) introduced a new feature called data classes since it was recognised that while classes can be used for very complicated things, most classes exist to hold simple data with a few functions to extract or update those data. Writing __init__ functions is boring with a lot of repetition and so data classes were created to automate some of the standard tasks when writing classes.\nTo turn our Dog class into a data class we first import the feature from the dataclasses module, we then apply it to our class using a decoration, @dataclass. We can then remove our __init__ function and replace it with a listing of attribute names, each tagged with the type of data that they should hold:\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Dog:\n    name: str\n    colour: str\n    energy: int = 1\n    \n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\n    \n    def exercise(self):\n        print(f\"You take {self.name} for a walk\")\n        self.energy -= 1\n            \n    def feed(self):\n        print(f\"{self.name} eats the food\")\n        self.energy += 1\n\nAll the other functions in the class remain as they were.\nUsing the class works in exactly the same way:\n\nour_dog = Dog(\"Spot\", \"brown\")\n\n\nprint(our_dog.describe())\n\nSpot is brown\n\n\n\nprint(our_dog.energy)\n\n1\n\n\n\nour_dog.exercise()\n\nYou take Spot for a walk"
  }
]